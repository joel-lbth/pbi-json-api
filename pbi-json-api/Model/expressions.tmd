expression 'Errors in waqi api - victoria park' =
	let
	Source = #"waqi api - victoria park",
	  #"Detected Type Mismatches" = let
	    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),
	    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),
	    fieldNames = Record.FieldNames(recordTypeFields),
	    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),
	    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = "The type of the value does not match the type of the column.", Detail = v], fieldTypes{i}})
	in
	    Table.TransformColumns(Source, pairs),
	  #"Added Index" = Table.AddIndexColumn(#"Detected Type Mismatches", "Row Number" ,1),
	  #"Kept Errors" = Table.SelectRowsWithErrors(#"Added Index", {"dt", "rxs.obs.msg.aqi", "rxs.obs.msg.idx", "rxs.obs.msg.attributions", "rxs.obs.msg.city.geo", "rxs.obs.msg.city.name", "rxs.obs.msg.city.url", "rxs.obs.msg.dominentpol", "humidity", "rxs.obs.msg.iaqi.h.t", "no2", "rxs.obs.msg.iaqi.no2.t", "ozone", "rxs.obs.msg.iaqi.o3.t", "pressure", "rxs.obs.msg.iaqi.p.t", "pm10", "rxs.obs.msg.iaqi.pm10.t", "pm25", "rxs.obs.msg.iaqi.pm25.t", "temp", "rxs.obs.msg.iaqi.t.t", "wind", "rxs.obs.msg.iaqi.w.t", "gust", "rxs.obs.msg.iaqi.wg.t", "rxs.obs.msg.time.s", "rxs.obs.msg.time.tz", "rxs.obs.msg.time.v", "rxs.obs.msg.time.iso", "rxs.obs.msg.obs.h.e", "rxs.obs.msg.obs.h.s", "rxs.obs.msg.obs.h.d", "rxs.obs.msg.obs.h.m", "rxs.obs.msg.obs.h.v", "rxs.obs.msg.obs.no2.e", "rxs.obs.msg.obs.no2.s", "rxs.obs.msg.obs.no2.d", "rxs.obs.msg.obs.no2.m", "rxs.obs.msg.obs.no2.v", "rxs.obs.msg.obs.o3.e", "rxs.obs.msg.obs.o3.s", "rxs.obs.msg.obs.o3.d", "rxs.obs.msg.obs.o3.m", "rxs.obs.msg.obs.o3.v", "rxs.obs.msg.obs.p.e", "rxs.obs.msg.obs.p.s", "rxs.obs.msg.obs.p.d", "rxs.obs.msg.obs.p.m", "rxs.obs.msg.obs.p.v", "rxs.obs.msg.obs.pm10.e", "rxs.obs.msg.obs.pm10.s", "rxs.obs.msg.obs.pm10.d", "rxs.obs.msg.obs.pm10.m", "rxs.obs.msg.obs.pm10.v", "rxs.obs.msg.obs.pm25.e", "rxs.obs.msg.obs.pm25.s", "rxs.obs.msg.obs.pm25.d", "rxs.obs.msg.obs.pm25.m", "rxs.obs.msg.obs.pm25.v", "rxs.obs.msg.obs.t.e", "rxs.obs.msg.obs.t.s", "rxs.obs.msg.obs.t.d", "rxs.obs.msg.obs.t.m", "rxs.obs.msg.obs.t.v", "rxs.obs.msg.obs.w.e", "rxs.obs.msg.obs.w.s", "rxs.obs.msg.obs.w.d", "rxs.obs.msg.obs.w.m", "rxs.obs.msg.obs.w.v", "rxs.obs.msg.obs.wg.e", "rxs.obs.msg.obs.wg.s", "rxs.obs.msg.obs.wg.d", "rxs.obs.msg.obs.wg.m", "rxs.obs.msg.obs.wg.v", "rxs.obs.msg.forecast.daily.o3", "rxs.obs.msg.forecast.daily.pm10", "rxs.obs.msg.forecast.daily.pm25", "rxs.obs.msg.xsync.gen", "rxs.obs.status", "rxs.obs.cached", "rxs.status", "rxs.ver"}),
	  #"Reordered Columns" = Table.ReorderColumns(#"Kept Errors", {"Row Number", "dt", "rxs.obs.msg.aqi", "rxs.obs.msg.idx", "rxs.obs.msg.attributions", "rxs.obs.msg.city.geo", "rxs.obs.msg.city.name", "rxs.obs.msg.city.url", "rxs.obs.msg.dominentpol", "humidity", "rxs.obs.msg.iaqi.h.t", "no2", "rxs.obs.msg.iaqi.no2.t", "ozone", "rxs.obs.msg.iaqi.o3.t", "pressure", "rxs.obs.msg.iaqi.p.t", "pm10", "rxs.obs.msg.iaqi.pm10.t", "pm25", "rxs.obs.msg.iaqi.pm25.t", "temp", "rxs.obs.msg.iaqi.t.t", "wind", "rxs.obs.msg.iaqi.w.t", "gust", "rxs.obs.msg.iaqi.wg.t", "rxs.obs.msg.time.s", "rxs.obs.msg.time.tz", "rxs.obs.msg.time.v", "rxs.obs.msg.time.iso", "rxs.obs.msg.obs.h.e", "rxs.obs.msg.obs.h.s", "rxs.obs.msg.obs.h.d", "rxs.obs.msg.obs.h.m", "rxs.obs.msg.obs.h.v", "rxs.obs.msg.obs.no2.e", "rxs.obs.msg.obs.no2.s", "rxs.obs.msg.obs.no2.d", "rxs.obs.msg.obs.no2.m", "rxs.obs.msg.obs.no2.v", "rxs.obs.msg.obs.o3.e", "rxs.obs.msg.obs.o3.s", "rxs.obs.msg.obs.o3.d", "rxs.obs.msg.obs.o3.m", "rxs.obs.msg.obs.o3.v", "rxs.obs.msg.obs.p.e", "rxs.obs.msg.obs.p.s", "rxs.obs.msg.obs.p.d", "rxs.obs.msg.obs.p.m", "rxs.obs.msg.obs.p.v", "rxs.obs.msg.obs.pm10.e", "rxs.obs.msg.obs.pm10.s", "rxs.obs.msg.obs.pm10.d", "rxs.obs.msg.obs.pm10.m", "rxs.obs.msg.obs.pm10.v", "rxs.obs.msg.obs.pm25.e", "rxs.obs.msg.obs.pm25.s", "rxs.obs.msg.obs.pm25.d", "rxs.obs.msg.obs.pm25.m", "rxs.obs.msg.obs.pm25.v", "rxs.obs.msg.obs.t.e", "rxs.obs.msg.obs.t.s", "rxs.obs.msg.obs.t.d", "rxs.obs.msg.obs.t.m", "rxs.obs.msg.obs.t.v", "rxs.obs.msg.obs.w.e", "rxs.obs.msg.obs.w.s", "rxs.obs.msg.obs.w.d", "rxs.obs.msg.obs.w.m", "rxs.obs.msg.obs.w.v", "rxs.obs.msg.obs.wg.e", "rxs.obs.msg.obs.wg.s", "rxs.obs.msg.obs.wg.d", "rxs.obs.msg.obs.wg.m", "rxs.obs.msg.obs.wg.v", "rxs.obs.msg.forecast.daily.o3", "rxs.obs.msg.forecast.daily.pm10", "rxs.obs.msg.forecast.daily.pm25", "rxs.obs.msg.xsync.gen", "rxs.obs.status", "rxs.obs.cached", "rxs.status", "rxs.ver"})
	in
	  #"Reordered Columns"
	lineageTag: ba4bf5b4-f09a-447c-b3c4-4f220677e2fd
	queryGroup: 'Query Errors - 14/09/2023 22:39:12'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Errors in waqi api - victoria park (2)' =
	let
	Source = #"waqi api - victoria park",
	  #"Detected Type Mismatches" = let
	    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),
	    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),
	    fieldNames = Record.FieldNames(recordTypeFields),
	    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),
	    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = "The type of the value does not match the type of the column.", Detail = v], fieldTypes{i}})
	in
	    Table.TransformColumns(Source, pairs),
	  #"Added Index" = Table.AddIndexColumn(#"Detected Type Mismatches", "Row Number" ,1),
	  #"Kept Errors" = Table.SelectRowsWithErrors(#"Added Index", {"dt", "rxs.obs.msg.aqi", "rxs.obs.msg.idx", "rxs.obs.msg.attributions", "rxs.obs.msg.city.geo", "rxs.obs.msg.city.name", "rxs.obs.msg.city.url", "rxs.obs.msg.dominentpol", "humidity", "rxs.obs.msg.iaqi.h.t", "no2", "rxs.obs.msg.iaqi.no2.t", "ozone", "rxs.obs.msg.iaqi.o3.t", "pressure", "rxs.obs.msg.iaqi.p.t", "pm10", "rxs.obs.msg.iaqi.pm10.t", "pm25", "rxs.obs.msg.iaqi.pm25.t", "temp", "rxs.obs.msg.iaqi.t.t", "wind", "rxs.obs.msg.iaqi.w.t", "gust", "rxs.obs.msg.iaqi.wg.t", "rxs.obs.msg.time.s", "rxs.obs.msg.time.tz", "rxs.obs.msg.time.v", "rxs.obs.msg.time.iso", "rxs.obs.msg.obs.h.e", "rxs.obs.msg.obs.h.s", "rxs.obs.msg.obs.h.d", "rxs.obs.msg.obs.h.m", "rxs.obs.msg.obs.h.v", "rxs.obs.msg.obs.no2.e", "rxs.obs.msg.obs.no2.s", "rxs.obs.msg.obs.no2.d", "rxs.obs.msg.obs.no2.m", "rxs.obs.msg.obs.no2.v", "rxs.obs.msg.obs.o3.e", "rxs.obs.msg.obs.o3.s", "rxs.obs.msg.obs.o3.d", "rxs.obs.msg.obs.o3.m", "rxs.obs.msg.obs.o3.v", "rxs.obs.msg.obs.p.e", "rxs.obs.msg.obs.p.s", "rxs.obs.msg.obs.p.d", "rxs.obs.msg.obs.p.m", "rxs.obs.msg.obs.p.v", "rxs.obs.msg.obs.pm10.e", "rxs.obs.msg.obs.pm10.s", "rxs.obs.msg.obs.pm10.d", "rxs.obs.msg.obs.pm10.m", "rxs.obs.msg.obs.pm10.v", "rxs.obs.msg.obs.pm25.e", "rxs.obs.msg.obs.pm25.s", "rxs.obs.msg.obs.pm25.d", "rxs.obs.msg.obs.pm25.m", "rxs.obs.msg.obs.pm25.v", "rxs.obs.msg.obs.t.e", "rxs.obs.msg.obs.t.s", "rxs.obs.msg.obs.t.d", "rxs.obs.msg.obs.t.m", "rxs.obs.msg.obs.t.v", "rxs.obs.msg.obs.w.e", "rxs.obs.msg.obs.w.s", "rxs.obs.msg.obs.w.d", "rxs.obs.msg.obs.w.m", "rxs.obs.msg.obs.w.v", "rxs.obs.msg.obs.wg.e", "rxs.obs.msg.obs.wg.s", "rxs.obs.msg.obs.wg.d", "rxs.obs.msg.obs.wg.m", "rxs.obs.msg.obs.wg.v", "rxs.obs.msg.forecast.daily.o3", "rxs.obs.msg.forecast.daily.pm10", "rxs.obs.msg.forecast.daily.pm25", "rxs.obs.msg.xsync.gen", "rxs.obs.status", "rxs.obs.cached", "rxs.status", "rxs.ver"}),
	  #"Reordered Columns" = Table.ReorderColumns(#"Kept Errors", {"Row Number", "dt", "rxs.obs.msg.aqi", "rxs.obs.msg.idx", "rxs.obs.msg.attributions", "rxs.obs.msg.city.geo", "rxs.obs.msg.city.name", "rxs.obs.msg.city.url", "rxs.obs.msg.dominentpol", "humidity", "rxs.obs.msg.iaqi.h.t", "no2", "rxs.obs.msg.iaqi.no2.t", "ozone", "rxs.obs.msg.iaqi.o3.t", "pressure", "rxs.obs.msg.iaqi.p.t", "pm10", "rxs.obs.msg.iaqi.pm10.t", "pm25", "rxs.obs.msg.iaqi.pm25.t", "temp", "rxs.obs.msg.iaqi.t.t", "wind", "rxs.obs.msg.iaqi.w.t", "gust", "rxs.obs.msg.iaqi.wg.t", "rxs.obs.msg.time.s", "rxs.obs.msg.time.tz", "rxs.obs.msg.time.v", "rxs.obs.msg.time.iso", "rxs.obs.msg.obs.h.e", "rxs.obs.msg.obs.h.s", "rxs.obs.msg.obs.h.d", "rxs.obs.msg.obs.h.m", "rxs.obs.msg.obs.h.v", "rxs.obs.msg.obs.no2.e", "rxs.obs.msg.obs.no2.s", "rxs.obs.msg.obs.no2.d", "rxs.obs.msg.obs.no2.m", "rxs.obs.msg.obs.no2.v", "rxs.obs.msg.obs.o3.e", "rxs.obs.msg.obs.o3.s", "rxs.obs.msg.obs.o3.d", "rxs.obs.msg.obs.o3.m", "rxs.obs.msg.obs.o3.v", "rxs.obs.msg.obs.p.e", "rxs.obs.msg.obs.p.s", "rxs.obs.msg.obs.p.d", "rxs.obs.msg.obs.p.m", "rxs.obs.msg.obs.p.v", "rxs.obs.msg.obs.pm10.e", "rxs.obs.msg.obs.pm10.s", "rxs.obs.msg.obs.pm10.d", "rxs.obs.msg.obs.pm10.m", "rxs.obs.msg.obs.pm10.v", "rxs.obs.msg.obs.pm25.e", "rxs.obs.msg.obs.pm25.s", "rxs.obs.msg.obs.pm25.d", "rxs.obs.msg.obs.pm25.m", "rxs.obs.msg.obs.pm25.v", "rxs.obs.msg.obs.t.e", "rxs.obs.msg.obs.t.s", "rxs.obs.msg.obs.t.d", "rxs.obs.msg.obs.t.m", "rxs.obs.msg.obs.t.v", "rxs.obs.msg.obs.w.e", "rxs.obs.msg.obs.w.s", "rxs.obs.msg.obs.w.d", "rxs.obs.msg.obs.w.m", "rxs.obs.msg.obs.w.v", "rxs.obs.msg.obs.wg.e", "rxs.obs.msg.obs.wg.s", "rxs.obs.msg.obs.wg.d", "rxs.obs.msg.obs.wg.m", "rxs.obs.msg.obs.wg.v", "rxs.obs.msg.forecast.daily.o3", "rxs.obs.msg.forecast.daily.pm10", "rxs.obs.msg.forecast.daily.pm25", "rxs.obs.msg.xsync.gen", "rxs.obs.status", "rxs.obs.cached", "rxs.status", "rxs.ver"})
	in
	  #"Reordered Columns"
	lineageTag: 21c96a3c-5c69-4789-9363-634fe8f6496a
	queryGroup: 'Query Errors - 14/09/2023 22:39:16'

	annotation PBI_ResultType = Table

expression 'Errors in waqi api - victoria park (3)' =
	let
	Source = #"waqi api - victoria park",
	  #"Detected Type Mismatches" = let
	    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),
	    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),
	    fieldNames = Record.FieldNames(recordTypeFields),
	    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),
	    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = "The type of the value does not match the type of the column.", Detail = v], fieldTypes{i}})
	in
	    Table.TransformColumns(Source, pairs),
	  #"Added Index" = Table.AddIndexColumn(#"Detected Type Mismatches", "Row Number" ,1),
	  #"Kept Errors" = Table.SelectRowsWithErrors(#"Added Index", {"dt", "rxs.obs.msg.aqi", "rxs.obs.msg.idx", "rxs.obs.msg.attributions", "rxs.obs.msg.city.geo", "rxs.obs.msg.city.name", "rxs.obs.msg.city.url", "rxs.obs.msg.dominentpol", "humidity", "rxs.obs.msg.iaqi.h.t", "no2", "rxs.obs.msg.iaqi.no2.t", "ozone", "rxs.obs.msg.iaqi.o3.t", "pressure", "rxs.obs.msg.iaqi.p.t", "pm10", "rxs.obs.msg.iaqi.pm10.t", "pm25", "rxs.obs.msg.iaqi.pm25.t", "temp", "rxs.obs.msg.iaqi.t.t", "wind", "rxs.obs.msg.iaqi.w.t", "gust", "rxs.obs.msg.iaqi.wg.t", "rxs.obs.msg.time.s", "rxs.obs.msg.time.tz", "rxs.obs.msg.time.v", "rxs.obs.msg.time.iso", "rxs.obs.msg.obs.h.e", "rxs.obs.msg.obs.h.s", "rxs.obs.msg.obs.h.d", "rxs.obs.msg.obs.h.m", "rxs.obs.msg.obs.h.v", "rxs.obs.msg.obs.no2.e", "rxs.obs.msg.obs.no2.s", "rxs.obs.msg.obs.no2.d", "rxs.obs.msg.obs.no2.m", "rxs.obs.msg.obs.no2.v", "rxs.obs.msg.obs.o3.e", "rxs.obs.msg.obs.o3.s", "rxs.obs.msg.obs.o3.d", "rxs.obs.msg.obs.o3.m", "rxs.obs.msg.obs.o3.v", "rxs.obs.msg.obs.p.e", "rxs.obs.msg.obs.p.s", "rxs.obs.msg.obs.p.d", "rxs.obs.msg.obs.p.m", "rxs.obs.msg.obs.p.v", "rxs.obs.msg.obs.pm10.e", "rxs.obs.msg.obs.pm10.s", "rxs.obs.msg.obs.pm10.d", "rxs.obs.msg.obs.pm10.m", "rxs.obs.msg.obs.pm10.v", "rxs.obs.msg.obs.pm25.e", "rxs.obs.msg.obs.pm25.s", "rxs.obs.msg.obs.pm25.d", "rxs.obs.msg.obs.pm25.m", "rxs.obs.msg.obs.pm25.v", "rxs.obs.msg.obs.t.e", "rxs.obs.msg.obs.t.s", "rxs.obs.msg.obs.t.d", "rxs.obs.msg.obs.t.m", "rxs.obs.msg.obs.t.v", "rxs.obs.msg.obs.w.e", "rxs.obs.msg.obs.w.s", "rxs.obs.msg.obs.w.d", "rxs.obs.msg.obs.w.m", "rxs.obs.msg.obs.w.v", "rxs.obs.msg.obs.wg.e", "rxs.obs.msg.obs.wg.s", "rxs.obs.msg.obs.wg.d", "rxs.obs.msg.obs.wg.m", "rxs.obs.msg.obs.wg.v", "rxs.obs.msg.forecast.daily.o3", "rxs.obs.msg.forecast.daily.pm10", "rxs.obs.msg.forecast.daily.pm25", "rxs.obs.msg.xsync.gen", "rxs.obs.status", "rxs.obs.cached", "rxs.status", "rxs.ver"}),
	  #"Reordered Columns" = Table.ReorderColumns(#"Kept Errors", {"Row Number", "dt", "rxs.obs.msg.aqi", "rxs.obs.msg.idx", "rxs.obs.msg.attributions", "rxs.obs.msg.city.geo", "rxs.obs.msg.city.name", "rxs.obs.msg.city.url", "rxs.obs.msg.dominentpol", "humidity", "rxs.obs.msg.iaqi.h.t", "no2", "rxs.obs.msg.iaqi.no2.t", "ozone", "rxs.obs.msg.iaqi.o3.t", "pressure", "rxs.obs.msg.iaqi.p.t", "pm10", "rxs.obs.msg.iaqi.pm10.t", "pm25", "rxs.obs.msg.iaqi.pm25.t", "temp", "rxs.obs.msg.iaqi.t.t", "wind", "rxs.obs.msg.iaqi.w.t", "gust", "rxs.obs.msg.iaqi.wg.t", "rxs.obs.msg.time.s", "rxs.obs.msg.time.tz", "rxs.obs.msg.time.v", "rxs.obs.msg.time.iso", "rxs.obs.msg.obs.h.e", "rxs.obs.msg.obs.h.s", "rxs.obs.msg.obs.h.d", "rxs.obs.msg.obs.h.m", "rxs.obs.msg.obs.h.v", "rxs.obs.msg.obs.no2.e", "rxs.obs.msg.obs.no2.s", "rxs.obs.msg.obs.no2.d", "rxs.obs.msg.obs.no2.m", "rxs.obs.msg.obs.no2.v", "rxs.obs.msg.obs.o3.e", "rxs.obs.msg.obs.o3.s", "rxs.obs.msg.obs.o3.d", "rxs.obs.msg.obs.o3.m", "rxs.obs.msg.obs.o3.v", "rxs.obs.msg.obs.p.e", "rxs.obs.msg.obs.p.s", "rxs.obs.msg.obs.p.d", "rxs.obs.msg.obs.p.m", "rxs.obs.msg.obs.p.v", "rxs.obs.msg.obs.pm10.e", "rxs.obs.msg.obs.pm10.s", "rxs.obs.msg.obs.pm10.d", "rxs.obs.msg.obs.pm10.m", "rxs.obs.msg.obs.pm10.v", "rxs.obs.msg.obs.pm25.e", "rxs.obs.msg.obs.pm25.s", "rxs.obs.msg.obs.pm25.d", "rxs.obs.msg.obs.pm25.m", "rxs.obs.msg.obs.pm25.v", "rxs.obs.msg.obs.t.e", "rxs.obs.msg.obs.t.s", "rxs.obs.msg.obs.t.d", "rxs.obs.msg.obs.t.m", "rxs.obs.msg.obs.t.v", "rxs.obs.msg.obs.w.e", "rxs.obs.msg.obs.w.s", "rxs.obs.msg.obs.w.d", "rxs.obs.msg.obs.w.m", "rxs.obs.msg.obs.w.v", "rxs.obs.msg.obs.wg.e", "rxs.obs.msg.obs.wg.s", "rxs.obs.msg.obs.wg.d", "rxs.obs.msg.obs.wg.m", "rxs.obs.msg.obs.wg.v", "rxs.obs.msg.forecast.daily.o3", "rxs.obs.msg.forecast.daily.pm10", "rxs.obs.msg.forecast.daily.pm25", "rxs.obs.msg.xsync.gen", "rxs.obs.status", "rxs.obs.cached", "rxs.status", "rxs.ver"})
	in
	  #"Reordered Columns"
	lineageTag: 9b3889fb-0d1b-4f47-9912-2ae316ae01df
	queryGroup: 'Query Errors - 15/09/2023 09:00:57'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Errors in waqi api - victoria park (4)' =
	let
	Source = #"waqi api - victoria park",
	  #"Detected Type Mismatches" = let
	    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),
	    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),
	    fieldNames = Record.FieldNames(recordTypeFields),
	    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),
	    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = "The type of the value does not match the type of the column.", Detail = v], fieldTypes{i}})
	in
	    Table.TransformColumns(Source, pairs),
	  #"Added Index" = Table.AddIndexColumn(#"Detected Type Mismatches", "Row Number" ,1),
	  #"Kept Errors" = Table.SelectRowsWithErrors(#"Added Index", {"dt", "rxs.obs.msg.aqi", "rxs.obs.msg.idx", "rxs.obs.msg.attributions", "latitude", "longitude", "rxs.obs.msg.city.name", "rxs.obs.msg.city.url", "rxs.obs.msg.dominentpol", "humidity", "rxs.obs.msg.iaqi.h.t", "no2", "rxs.obs.msg.iaqi.no2.t", "ozone", "rxs.obs.msg.iaqi.o3.t", "pressure", "rxs.obs.msg.iaqi.p.t", "pm10", "rxs.obs.msg.iaqi.pm10.t", "pm25", "rxs.obs.msg.iaqi.pm25.t", "temp", "rxs.obs.msg.iaqi.t.t", "wind", "rxs.obs.msg.iaqi.w.t", "gust", "rxs.obs.msg.iaqi.wg.t", "rxs.obs.msg.time.s", "rxs.obs.msg.time.tz", "rxs.obs.msg.time.v", "rxs.obs.msg.time.iso", "rxs.obs.msg.obs.h.e", "rxs.obs.msg.obs.h.s", "rxs.obs.msg.obs.h.d", "rxs.obs.msg.obs.h.m", "rxs.obs.msg.obs.h.v", "rxs.obs.msg.obs.no2.e", "rxs.obs.msg.obs.no2.s", "rxs.obs.msg.obs.no2.d", "rxs.obs.msg.obs.no2.m", "rxs.obs.msg.obs.no2.v", "rxs.obs.msg.obs.o3.e", "rxs.obs.msg.obs.o3.s", "rxs.obs.msg.obs.o3.d", "rxs.obs.msg.obs.o3.m", "rxs.obs.msg.obs.o3.v", "rxs.obs.msg.obs.p.e", "rxs.obs.msg.obs.p.s", "rxs.obs.msg.obs.p.d", "rxs.obs.msg.obs.p.m", "rxs.obs.msg.obs.p.v", "rxs.obs.msg.obs.pm10.e", "rxs.obs.msg.obs.pm10.s", "rxs.obs.msg.obs.pm10.d", "rxs.obs.msg.obs.pm10.m", "rxs.obs.msg.obs.pm10.v", "rxs.obs.msg.obs.pm25.e", "rxs.obs.msg.obs.pm25.s", "rxs.obs.msg.obs.pm25.d", "rxs.obs.msg.obs.pm25.m", "rxs.obs.msg.obs.pm25.v", "rxs.obs.msg.obs.t.e", "rxs.obs.msg.obs.t.s", "rxs.obs.msg.obs.t.d", "rxs.obs.msg.obs.t.m", "rxs.obs.msg.obs.t.v", "rxs.obs.msg.obs.w.e", "rxs.obs.msg.obs.w.s", "rxs.obs.msg.obs.w.d", "rxs.obs.msg.obs.w.m", "rxs.obs.msg.obs.w.v", "rxs.obs.msg.obs.wg.e", "rxs.obs.msg.obs.wg.s", "rxs.obs.msg.obs.wg.d", "rxs.obs.msg.obs.wg.m", "rxs.obs.msg.obs.wg.v", "rxs.obs.msg.forecast.daily.o3", "rxs.obs.msg.forecast.daily.pm10", "rxs.obs.msg.forecast.daily.pm25", "rxs.obs.msg.xsync.gen", "rxs.obs.status", "rxs.obs.cached", "rxs.status", "rxs.ver"}),
	  #"Reordered Columns" = Table.ReorderColumns(#"Kept Errors", {"Row Number", "dt", "rxs.obs.msg.aqi", "rxs.obs.msg.idx", "rxs.obs.msg.attributions", "latitude", "longitude", "rxs.obs.msg.city.name", "rxs.obs.msg.city.url", "rxs.obs.msg.dominentpol", "humidity", "rxs.obs.msg.iaqi.h.t", "no2", "rxs.obs.msg.iaqi.no2.t", "ozone", "rxs.obs.msg.iaqi.o3.t", "pressure", "rxs.obs.msg.iaqi.p.t", "pm10", "rxs.obs.msg.iaqi.pm10.t", "pm25", "rxs.obs.msg.iaqi.pm25.t", "temp", "rxs.obs.msg.iaqi.t.t", "wind", "rxs.obs.msg.iaqi.w.t", "gust", "rxs.obs.msg.iaqi.wg.t", "rxs.obs.msg.time.s", "rxs.obs.msg.time.tz", "rxs.obs.msg.time.v", "rxs.obs.msg.time.iso", "rxs.obs.msg.obs.h.e", "rxs.obs.msg.obs.h.s", "rxs.obs.msg.obs.h.d", "rxs.obs.msg.obs.h.m", "rxs.obs.msg.obs.h.v", "rxs.obs.msg.obs.no2.e", "rxs.obs.msg.obs.no2.s", "rxs.obs.msg.obs.no2.d", "rxs.obs.msg.obs.no2.m", "rxs.obs.msg.obs.no2.v", "rxs.obs.msg.obs.o3.e", "rxs.obs.msg.obs.o3.s", "rxs.obs.msg.obs.o3.d", "rxs.obs.msg.obs.o3.m", "rxs.obs.msg.obs.o3.v", "rxs.obs.msg.obs.p.e", "rxs.obs.msg.obs.p.s", "rxs.obs.msg.obs.p.d", "rxs.obs.msg.obs.p.m", "rxs.obs.msg.obs.p.v", "rxs.obs.msg.obs.pm10.e", "rxs.obs.msg.obs.pm10.s", "rxs.obs.msg.obs.pm10.d", "rxs.obs.msg.obs.pm10.m", "rxs.obs.msg.obs.pm10.v", "rxs.obs.msg.obs.pm25.e", "rxs.obs.msg.obs.pm25.s", "rxs.obs.msg.obs.pm25.d", "rxs.obs.msg.obs.pm25.m", "rxs.obs.msg.obs.pm25.v", "rxs.obs.msg.obs.t.e", "rxs.obs.msg.obs.t.s", "rxs.obs.msg.obs.t.d", "rxs.obs.msg.obs.t.m", "rxs.obs.msg.obs.t.v", "rxs.obs.msg.obs.w.e", "rxs.obs.msg.obs.w.s", "rxs.obs.msg.obs.w.d", "rxs.obs.msg.obs.w.m", "rxs.obs.msg.obs.w.v", "rxs.obs.msg.obs.wg.e", "rxs.obs.msg.obs.wg.s", "rxs.obs.msg.obs.wg.d", "rxs.obs.msg.obs.wg.m", "rxs.obs.msg.obs.wg.v", "rxs.obs.msg.forecast.daily.o3", "rxs.obs.msg.forecast.daily.pm10", "rxs.obs.msg.forecast.daily.pm25", "rxs.obs.msg.xsync.gen", "rxs.obs.status", "rxs.obs.cached", "rxs.status", "rxs.ver"})
	in
	  #"Reordered Columns"
	lineageTag: 4ce7eba8-3839-488e-b333-820cbc58c036
	queryGroup: 'Query Errors - 15/09/2023 09:47:33'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

